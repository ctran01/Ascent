{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport createDataContext from \"./createDataContext\";\nimport apiServer from \"../api/apiServer\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\n\nvar routeReducer = function routeReducer(state, action) {\n  switch (action.type) {\n    case \"get_routes\":\n      return action.payload;\n\n    case \"get_route\":\n      return action.payload;\n\n    case \"get_user_routes\":\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nvar addRoute = function addRoute(dispatch) {\n  return function _callee(name, grade, type, latitude, longitude, description, navigateAway, alertMessage) {\n    var userid, res;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('userid'));\n\n          case 2:\n            userid = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(apiServer.post(\"/route\", {\n              name: name,\n              description: description,\n              grade: grade,\n              type: type,\n              latitude: latitude,\n              longitude: longitude,\n              user_id: userid,\n              area_id: 1\n            }));\n\n          case 5:\n            res = _context.sent;\n\n            if (navigateAway) {\n              navigateAway();\n            }\n\n            if (alertMessage) {\n              alertMessage();\n            }\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar getRoutes = function getRoutes(dispatch) {\n  return function _callee2() {\n    var res;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(apiServer.get(\"/route\"));\n\n          case 2:\n            res = _context2.sent;\n            dispatch({\n              type: \"get_routes\",\n              payload: res.data\n            });\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar getRoute = function getRoute(dispatch) {\n  return function _callee3(id) {\n    var res;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(apiServer.get(\"/route/\" + id));\n\n          case 2:\n            res = _context3.sent;\n            dispatch({\n              type: \"get_route\",\n              payload: res.data\n            });\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar getUserRoutes = function getUserRoutes(dispatch) {\n  return function _callee4(id) {\n    var userid, res;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('userid'));\n\n          case 2:\n            userid = _context4.sent;\n            _context4.next = 5;\n            return _regeneratorRuntime.awrap(apiServer.get(\"/route/user/\" + userid));\n\n          case 5:\n            res = _context4.sent;\n            dispatch({\n              type: \"get_user_routes\",\n              payload: res.data.routes\n            });\n\n          case 7:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar getFollowedRoutes = function getFollowedRoutes(dispatch) {\n  return function _callee5() {\n    var userid;\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('userId'));\n\n          case 2:\n            userid = _context5.sent;\n\n          case 3:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar deleteRoute = function deleteRoute(dispatch) {\n  return function _callee6(id, navigateAway, alertMessage) {\n    var res;\n    return _regeneratorRuntime.async(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return _regeneratorRuntime.awrap(apiServer.delete(\"/route/\" + id));\n\n          case 2:\n            res = _context6.sent;\n\n            if (navigateAway) {\n              navigateAway();\n            }\n\n            if (alertMessage) {\n              alertMessage();\n            }\n\n          case 5:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar editRoute = function editRoute(dispatch) {\n  return function _callee7(id, name, grade, type, latitude, longitude, description, navigateAway, alertMessage) {\n    var res;\n    return _regeneratorRuntime.async(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return _regeneratorRuntime.awrap(apiServer.put(\"/route/\" + id, {\n              name: name,\n              grade: grade,\n              type: type,\n              latitude: latitude,\n              longitude: longitude,\n              description: description\n            }));\n\n          case 2:\n            res = _context7.sent;\n            dispatch({\n              type: \"edit_route\",\n              payload: {\n                id: id,\n                name: name,\n                grade: grade,\n                type: type,\n                latitude: latitude,\n                longitude: longitude,\n                description: description\n              }\n            });\n\n            if (navigateAway) {\n              navigateAway();\n            }\n\n            if (alertMessage) {\n              alertMessage();\n            }\n\n          case 6:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar followRoute = function followRoute(dispatch) {\n  return function _callee8(id, navigateAway, alertMessage) {\n    var userid, res;\n    return _regeneratorRuntime.async(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('userid'));\n\n          case 2:\n            userid = _context8.sent;\n            _context8.next = 5;\n            return _regeneratorRuntime.awrap(apiServer.post(\"/route/user/\" + userid + \"/route/\" + id));\n\n          case 5:\n            res = _context8.sent;\n\n            if (navigateAway) {\n              navigateAway();\n            }\n\n            if (alertMessage) {\n              alertMessage();\n            }\n\n          case 8:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar _createDataContext = createDataContext(routeReducer, {\n  addRoute: addRoute,\n  deleteRoute: deleteRoute,\n  editRoute: editRoute,\n  getRoute: getRoute,\n  getRoutes: getRoutes,\n  getUserRoutes: getUserRoutes,\n  followRoute: followRoute,\n  getFollowedRoutes: getFollowedRoutes\n}, []),\n    Context = _createDataContext.Context,\n    Provider = _createDataContext.Provider;\n\nexport { Context, Provider };","map":{"version":3,"sources":["C:/Users/Chris/Desktop/App_Academy/Ascent-mobile/client/app/context/RouteContext.js"],"names":["React","createDataContext","apiServer","routeReducer","state","action","type","payload","addRoute","dispatch","name","grade","latitude","longitude","description","navigateAway","alertMessage","AsyncStorage","getItem","userid","post","user_id","area_id","res","getRoutes","get","data","getRoute","id","getUserRoutes","routes","getFollowedRoutes","deleteRoute","delete","editRoute","put","followRoute","Context","Provider"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport createDataContext from './createDataContext'\r\nimport apiServer from '../api/apiServer'\r\nimport { AsyncStorage } from 'react-native';\r\n  const routeReducer = (state,action) =>{\r\n    switch(action.type){\r\n      case \"get_routes\":\r\n        return action.payload\r\n      case \"get_route\":\r\n        return action.payload\r\n      case \"get_user_routes\":\r\n        return action.payload\r\n      default:\r\n        return state\r\n    }\r\n  }\r\n  \r\n  const addRoute = (dispatch)=>{\r\n    return async(name,grade,type,latitude,longitude,description,navigateAway,alertMessage)=>{\r\n      const userid = await AsyncStorage.getItem('userid')\r\n      const res = await apiServer.post(\"/route\",{\r\n        name: name,\r\n        description: description,\r\n        grade : grade,\r\n        type: type,\r\n        latitude: latitude,\r\n        longitude: longitude,\r\n        user_id: userid,\r\n        //TODO area dropdown in route form\r\n        area_id: 1\r\n      })\r\n      if(navigateAway){\r\n        navigateAway();\r\n      }\r\n      if(alertMessage){\r\n        alertMessage();\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  //Get all areas\r\nconst getRoutes = (dispatch)=>{\r\n  return async ()=>{\r\n    \r\n    const res = await apiServer.get(\"/route\");\r\n    dispatch({type: \"get_routes\", payload: res.data})\r\n  }\r\n}\r\n\r\n//Get 1 area\r\n\r\nconst getRoute =(dispatch)=>{\r\n  return async (id)=>{\r\n    const res = await apiServer.get(`/route/${id}`);\r\n    dispatch({type: \"get_route\", payload: res.data})\r\n  }\r\n}\r\n\r\n//get routes created by user\r\nconst getUserRoutes = (dispatch)=>{\r\nreturn async (id) =>{\r\n  const userid = await AsyncStorage.getItem('userid')\r\n  const res = await apiServer.get(`/route/user/${userid}`)\r\n  dispatch({type: \"get_user_routes\", payload: res.data.routes})\r\n}\r\n}\r\n\r\n//get followed routes \r\nconst getFollowedRoutes = (dispatch)=>{\r\n  return async() =>{\r\n    const userid = await AsyncStorage.getItem('userId')\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n//delete route\r\nconst deleteRoute = (dispatch)=>{\r\n  return async(id,navigateAway,alertMessage)=>{\r\n    const res = await apiServer.delete(`/route/${id}`)\r\n    if(navigateAway){\r\n      navigateAway();\r\n    }\r\n    if(alertMessage){\r\n      alertMessage();\r\n    }\r\n  }\r\n}\r\n\r\nconst editRoute = (dispatch)=>{\r\n  return async(id,name,grade, type, latitude,longitude, description,navigateAway,alertMessage)=>{\r\n\r\n    const res = await apiServer.put(`/route/${id}`, {name,grade, type, latitude, longitude,description})\r\n    dispatch({type: \"edit_route\", payload: {id,name,grade,type,latitude,longitude,description}})\r\n    if(navigateAway){\r\n      navigateAway();\r\n    }\r\n    if(alertMessage){\r\n      alertMessage();\r\n    }\r\n  }\r\n}\r\n\r\n//Follow Area\r\n\r\nconst followRoute = (dispatch)=>{\r\n  return async(id,navigateAway,alertMessage) =>{\r\n    const userid = await AsyncStorage.getItem('userid')\r\n    const res = await apiServer.post(`/route/user/${userid}/route/${id}`)\r\n    if(navigateAway){\r\n      navigateAway();\r\n    }\r\n    if(alertMessage){\r\n      alertMessage();\r\n    }\r\n  }\r\n}\r\n \r\n\r\n\r\nexport const {Context,Provider} = createDataContext(routeReducer, {addRoute,deleteRoute,editRoute,getRoute,getRoutes,getUserRoutes,followRoute, getFollowedRoutes}, [])"]},"metadata":{},"sourceType":"module"}