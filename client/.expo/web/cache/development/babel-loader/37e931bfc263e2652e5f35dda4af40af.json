{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Chris\\\\Desktop\\\\App_Academy\\\\Ascent-mobile\\\\client\\\\app\\\\screens\\\\MapScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, useEffect, useState, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport MapView, { PROVIDER_GOOGLE, Marker, Circle, Callout } from 'react-native-maps';\nimport apiServer from \"../api/apiServer\";\nimport { Context as RouteContext } from \"../context/RouteContext\";\nimport { requestPermissionsAsync, watchPositionAsync, Accuracy } from 'expo-location';\n\nvar Map = function Map(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useContext = useContext(RouteContext),\n      state = _useContext.state,\n      getRoutes = _useContext.getRoutes;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      err = _useState2[0],\n      setErr = _useState2[1];\n\n  var _useState3 = useState({\n    coords: {\n      latitude: 29.74026722,\n      longitude: -95.4825714\n    }\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentLocation = _useState4[0],\n      setCurrentLocation = _useState4[1];\n\n  var askPermission = function askPermission() {\n    return _regeneratorRuntime.async(function askPermission$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(requestPermissionsAsync());\n\n          case 3:\n            _context.next = 8;\n            break;\n\n          case 5:\n            _context.prev = 5;\n            _context.t0 = _context[\"catch\"](0);\n            setErr(_context.t0);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 5]], Promise);\n  };\n\n  useEffect(function () {\n    askPermission();\n    getRoutes();\n  }, []);\n\n  if (!currentLocation) {\n    return React.createElement(ActivityIndicator, {\n      size: \"large\",\n      style: {\n        marginTop: 200\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 12\n      }\n    });\n  }\n\n  var circleRef = useRef(null);\n  return React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, React.createElement(MapView, {\n    style: {\n      height: \"100%\"\n    },\n    initialRegion: _objectSpread(_objectSpread({}, currentLocation.coords), {}, {\n      latitudeDelta: 3,\n      longitudeDelta: 3\n    }),\n    region: _objectSpread(_objectSpread({}, currentLocation.coords), {}, {\n      latitudeDelta: 3,\n      longitudeDelta: 3\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, React.createElement(Circle, {\n    ref: circleRef,\n    center: currentLocation.coords,\n    radius: 5000,\n    onLayout: function onLayout() {\n      return circleRef.current.setNativeProps({\n        strokeColor: \"blue\",\n        fillColor: \"blue\"\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }), state.map(function (item) {\n    return React.createElement(Marker, {\n      key: item.id,\n      coordinate: {\n        latitude: parseFloat(item.latitude),\n        longitude: parseFloat(item.longitude)\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }, React.createElement(Callout, {\n      onPress: function onPress() {\n        return navigation.navigate('RouteDetail', {\n          id: item.id,\n          title: item.name\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 15\n      }\n    }, React.createElement(View, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 19\n      }\n    }, React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    }, \"Route: \", item.name), React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }\n    }, \"Grade: \", item.grade))));\n  })));\n};\n\nvar styles = StyleSheet.create({\n  image: {\n    height: 50,\n    width: 50\n  }\n});\n\nMap.navigationOptions = function (_ref2) {\n  var navigation = _ref2.navigation;\n  return {\n    title: \"Search\",\n    headerTitleStyle: {\n      color: 'white'\n    },\n    headerBackTitleVisible: false,\n    headerStyle: {\n      backgroundColor: 'black'\n    }\n  };\n};\n\nexport default Map;","map":{"version":3,"sources":["C:/Users/Chris/Desktop/App_Academy/Ascent-mobile/client/app/screens/MapScreen.js"],"names":["React","useContext","useEffect","useState","useRef","MapView","PROVIDER_GOOGLE","Marker","Circle","Callout","apiServer","Context","RouteContext","requestPermissionsAsync","watchPositionAsync","Accuracy","Map","navigation","state","getRoutes","err","setErr","coords","latitude","longitude","currentLocation","setCurrentLocation","askPermission","marginTop","circleRef","height","latitudeDelta","longitudeDelta","current","setNativeProps","strokeColor","fillColor","map","item","id","parseFloat","navigate","title","name","grade","styles","StyleSheet","create","image","width","navigationOptions","headerTitleStyle","color","headerBackTitleVisible","headerStyle","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState, useRef } from 'react';\r\nimport {View, Text, StyleSheet, ActivityIndicator, Image} from 'react-native';\r\nimport MapView , {PROVIDER_GOOGLE, Marker, Circle, Callout} from 'react-native-maps';\r\nimport apiServer from '../api/apiServer'\r\nimport {Context as RouteContext} from '../context/RouteContext'\r\nimport {requestPermissionsAsync, watchPositionAsync,Accuracy} from 'expo-location'\r\n\r\nconst Map = ({navigation}) => {\r\n\r\n  const{state,getRoutes}= useContext(RouteContext)\r\n  const[err,setErr] = useState(null)\r\n  const[currentLocation, setCurrentLocation] = useState({coords:{latitude: 29.74026722, longitude:-95.4825714}})\r\n  \r\n\r\n\r\n  \r\n\r\n  const askPermission = async()=>{\r\n    try{\r\n      await requestPermissionsAsync();\r\n      // await watchPositionAsync({\r\n      //   accuracy: Accuracy.BestForNavigation,\r\n      //   timeInterval:1000,\r\n      //   distanceInterval: 10\r\n      // }, (location)=>{\r\n      //   setCurrentLocation(location)\r\n      // })\r\n    }catch(err){\r\n      setErr(err)\r\n    }\r\n  }\r\n\r\n  useEffect(()=>{\r\n    askPermission();\r\n    getRoutes()\r\n  },[])\r\n  \r\n  if(!currentLocation){\r\n    return <ActivityIndicator size =\"large\" style={{marginTop:200}}/>\r\n  }\r\n\r\n  const circleRef = useRef(null)\r\n  return (\r\n    <View>\r\n      \r\n      {/* {err ? <Text>Location services have been disabled</Text>: null} */}\r\n      <MapView style={{height:\"100%\"}}\r\n      \r\n      \r\n      initialRegion={{\r\n        ...currentLocation.coords,\r\n        // latitude: 30.2509,\r\n        // longitude: -97.7969,\r\n        latitudeDelta: 3,\r\n        longitudeDelta: 3\r\n      }}\r\n      region={{\r\n        ...currentLocation.coords,\r\n        latitudeDelta: 3,\r\n        longitudeDelta: 3\r\n      }}\r\n      >\r\n        <Circle\r\n          ref={circleRef}\r\n          center={currentLocation.coords}\r\n          radius={5000}\r\n          onLayout={() => (circleRef.current.setNativeProps({\r\n            strokeColor: \"blue\",\r\n            fillColor: \"blue\",\r\n          }))}\r\n        />\r\n\r\n        {state.map(item =>{\r\n          return(\r\n            <Marker\r\n              key={item.id}\r\n              coordinate={{\r\n                latitude: parseFloat(item.latitude),\r\n                longitude: parseFloat(item.longitude)\r\n              }}\r\n            >\r\n              <Callout onPress={()=>navigation.navigate('RouteDetail', {id:item.id, title:item.name})}>\r\n                  <View>\r\n                    <Text>Route: {item.name}</Text>\r\n                    <Text>Grade: {item.grade}</Text>\r\n                  </View>\r\n              </Callout>\r\n            </Marker>)}\r\n        )}\r\n      </MapView>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles=StyleSheet.create({\r\n  image:{\r\n    height:50,\r\n    width:50\r\n  }\r\n})\r\n\r\nMap.navigationOptions = ({navigation}) => {\r\n  \r\n  return {\r\n    title: \"Search\" ,\r\n    headerTitleStyle: {color: 'white'},\r\n    headerBackTitleVisible: false,\r\n    headerStyle: {backgroundColor: 'black', }\r\n  };\r\n};\r\nexport default Map;"]},"metadata":{},"sourceType":"module"}