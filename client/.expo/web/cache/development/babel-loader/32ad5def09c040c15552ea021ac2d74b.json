{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport createDataContext from \"./createDataContext\";\nimport apiServer from \"../api/apiServer\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\n\nvar routeReducer = function routeReducer(state, action) {\n  switch (action.type) {\n    case \"get_routes\":\n      return action.payload;\n\n    case \"get_route\":\n      return action.payload;\n\n    case \"get_user_routes\":\n      return action.payload;\n\n    case \"get_followed_routes\":\n      return action.payload;\n\n    case \"set_searched_routes\":\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nvar addRoute = function addRoute(dispatch) {\n  return function _callee(name, grade, type, areaid, latitude, longitude, description, navigateAway, alertMessage) {\n    var userid, res;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('userid'));\n\n          case 2:\n            userid = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(apiServer.post(\"/route\", {\n              name: name,\n              description: description,\n              grade: grade,\n              type: type,\n              latitude: latitude,\n              longitude: longitude,\n              user_id: userid,\n              area_id: areaid\n            }));\n\n          case 5:\n            res = _context.sent;\n\n            if (navigateAway) {\n              navigateAway();\n            }\n\n            if (alertMessage) {\n              alertMessage();\n            }\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar getRoutes = function getRoutes(dispatch) {\n  return function _callee2() {\n    var res;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(apiServer.get(\"/route\"));\n\n          case 2:\n            res = _context2.sent;\n            dispatch({\n              type: \"get_routes\",\n              payload: res.data.routes\n            });\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar getRoute = function getRoute(dispatch) {\n  return function _callee3(id) {\n    var res;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(apiServer.get(\"/route/\" + id));\n\n          case 2:\n            res = _context3.sent;\n            dispatch({\n              type: \"get_route\",\n              payload: res.data\n            });\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar getUserRoutes = function getUserRoutes(dispatch) {\n  return function _callee4(id) {\n    var userid, res;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('userid'));\n\n          case 2:\n            userid = _context4.sent;\n            _context4.next = 5;\n            return _regeneratorRuntime.awrap(apiServer.get(\"/route/user/\" + userid));\n\n          case 5:\n            res = _context4.sent;\n            dispatch({\n              type: \"get_user_routes\",\n              payload: res.data.routes\n            });\n\n          case 7:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar getFollowedRoutes = function getFollowedRoutes(dispatch) {\n  return function _callee5() {\n    var userid, res;\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('userid'));\n\n          case 2:\n            userid = _context5.sent;\n            _context5.next = 5;\n            return _regeneratorRuntime.awrap(apiServer.get(\"/route/user/\" + userid + \"/follows\"));\n\n          case 5:\n            res = _context5.sent;\n            dispatch({\n              type: \"get_followed_routes\",\n              payload: res.data.user.followedRoutes\n            });\n\n          case 7:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar deleteRoute = function deleteRoute(dispatch) {\n  return function _callee6(id, navigateAway, alertMessage) {\n    var res;\n    return _regeneratorRuntime.async(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return _regeneratorRuntime.awrap(apiServer.delete(\"/route/\" + id));\n\n          case 2:\n            res = _context6.sent;\n\n            if (navigateAway) {\n              navigateAway();\n            }\n\n            if (alertMessage) {\n              alertMessage();\n            }\n\n          case 5:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar editRoute = function editRoute(dispatch) {\n  return function _callee7(id, name, grade, type, areaid, latitude, longitude, description, navigateAway, alertMessage, failMessage) {\n    var res;\n    return _regeneratorRuntime.async(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.prev = 0;\n            _context7.next = 3;\n            return _regeneratorRuntime.awrap(apiServer.put(\"/route/\" + id, {\n              name: name,\n              grade: grade,\n              type: type,\n              areaid: areaid,\n              latitude: latitude,\n              longitude: longitude,\n              description: description\n            }));\n\n          case 3:\n            res = _context7.sent;\n            dispatch({\n              type: \"edit_route\",\n              payload: {\n                id: id,\n                name: name,\n                grade: grade,\n                type: type,\n                areaid: areaid,\n                latitude: latitude,\n                longitude: longitude,\n                description: description\n              }\n            });\n\n            if (navigateAway) {\n              navigateAway();\n            }\n\n            if (alertMessage) {\n              alertMessage();\n            }\n\n            _context7.next = 12;\n            break;\n\n          case 9:\n            _context7.prev = 9;\n            _context7.t0 = _context7[\"catch\"](0);\n            failMessage();\n\n          case 12:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n};\n\nvar unfollowRoute = function unfollowRoute(id) {\n  var userid, res;\n  return _regeneratorRuntime.async(function unfollowRoute$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('userid'));\n\n        case 2:\n          userid = _context8.sent;\n          _context8.next = 5;\n          return _regeneratorRuntime.awrap(apiServer.delete(\"/follow/user/\" + userid + \"/route/\" + id));\n\n        case 5:\n          res = _context8.sent;\n\n        case 6:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar followRoute = function followRoute(dispatch) {\n  return function _callee8(id, navigateAway, alertMessage, failMessage) {\n    var userid, res;\n    return _regeneratorRuntime.async(function _callee8$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('userid'));\n\n          case 2:\n            userid = _context9.sent;\n            _context9.prev = 3;\n            _context9.next = 6;\n            return _regeneratorRuntime.awrap(apiServer.post(\"/follow/user/\" + userid + \"/route/\" + id));\n\n          case 6:\n            res = _context9.sent;\n\n            if (navigateAway) {\n              navigateAway();\n            }\n\n            if (alertMessage) {\n              alertMessage();\n            }\n\n            _context9.next = 15;\n            break;\n\n          case 11:\n            _context9.prev = 11;\n            _context9.t0 = _context9[\"catch\"](3);\n            unfollowRoute(id);\n            failMessage();\n\n          case 15:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, null, null, [[3, 11]], Promise);\n  };\n};\n\nvar setSearchedRoutes = function setSearchedRoutes(dispatch) {\n  return function (data) {\n    dispatch({\n      type: \"set_searched_routes\",\n      payload: data\n    });\n  };\n};\n\nvar _createDataContext = createDataContext(routeReducer, {\n  addRoute: addRoute,\n  deleteRoute: deleteRoute,\n  editRoute: editRoute,\n  getRoute: getRoute,\n  getRoutes: getRoutes,\n  getUserRoutes: getUserRoutes,\n  followRoute: followRoute,\n  getFollowedRoutes: getFollowedRoutes,\n  setSearchedRoutes: setSearchedRoutes\n}, []),\n    Context = _createDataContext.Context,\n    Provider = _createDataContext.Provider;\n\nexport { Context, Provider };","map":{"version":3,"sources":["C:/Users/Chris/Desktop/App_Academy/Ascent-mobile/client/app/context/RouteContext.js"],"names":["React","createDataContext","apiServer","routeReducer","state","action","type","payload","addRoute","dispatch","name","grade","areaid","latitude","longitude","description","navigateAway","alertMessage","AsyncStorage","getItem","userid","post","user_id","area_id","res","getRoutes","get","data","routes","getRoute","id","getUserRoutes","getFollowedRoutes","user","followedRoutes","deleteRoute","delete","editRoute","failMessage","put","unfollowRoute","followRoute","setSearchedRoutes","Context","Provider"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport createDataContext from './createDataContext'\r\nimport apiServer from '../api/apiServer'\r\nimport { AsyncStorage } from 'react-native';\r\n  const routeReducer = (state,action) =>{\r\n    switch(action.type){\r\n      case \"get_routes\":\r\n        return action.payload\r\n      case \"get_route\":\r\n        return action.payload\r\n      case \"get_user_routes\":\r\n        return action.payload\r\n      case \"get_followed_routes\":\r\n        return action.payload\r\n      case \"set_searched_routes\":\r\n        return action.payload\r\n      default:\r\n        return state\r\n    }\r\n  }\r\n  \r\n  const addRoute = (dispatch)=>{\r\n    return async(name,grade,type,areaid,latitude,longitude,description,navigateAway,alertMessage)=>{\r\n      const userid = await AsyncStorage.getItem('userid')\r\n      const res = await apiServer.post(\"/route\",{\r\n        name: name,\r\n        description: description,\r\n        grade : grade,\r\n        type: type,\r\n        latitude: latitude,\r\n        longitude: longitude,\r\n        user_id: userid,\r\n        area_id: areaid\r\n        //TODO area dropdown in route form\r\n      })\r\n      if(navigateAway){\r\n        navigateAway();\r\n      }\r\n      if(alertMessage){\r\n        alertMessage();\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  //Get all areas\r\nconst getRoutes = (dispatch)=>{\r\n  return async ()=>{\r\n    \r\n    const res = await apiServer.get(\"/route\");\r\n    dispatch({type: \"get_routes\", payload: res.data.routes})\r\n  }\r\n}\r\n\r\n//Get 1 area\r\n\r\nconst getRoute =(dispatch)=>{\r\n  return async (id)=>{\r\n    const res = await apiServer.get(`/route/${id}`);\r\n    dispatch({type: \"get_route\", payload: res.data})\r\n  }\r\n}\r\n\r\n//get routes created by user\r\nconst getUserRoutes = (dispatch)=>{\r\nreturn async (id) =>{\r\n  const userid = await AsyncStorage.getItem('userid')\r\n  const res = await apiServer.get(`/route/user/${userid}`)\r\n  dispatch({type: \"get_user_routes\", payload: res.data.routes})\r\n}\r\n}\r\n\r\n//get followed routes \r\nconst getFollowedRoutes = (dispatch)=>{\r\n  return async() =>{\r\n    const userid = await AsyncStorage.getItem('userid')\r\n    const res = await apiServer.get(`/route/user/${userid}/follows`)\r\n    dispatch({type: \"get_followed_routes\", payload: res.data.user.followedRoutes})\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n//delete route\r\nconst deleteRoute = (dispatch)=>{\r\n  return async(id,navigateAway,alertMessage)=>{\r\n    const res = await apiServer.delete(`/route/${id}`)\r\n    if(navigateAway){\r\n      navigateAway();\r\n    }\r\n    if(alertMessage){\r\n      alertMessage();\r\n    }\r\n  }\r\n}\r\n\r\nconst editRoute = (dispatch)=>{\r\n  return async(id,name,grade, type, areaid, latitude,longitude, description,navigateAway,alertMessage,failMessage)=>{\r\n    try{\r\n      const res = await apiServer.put(`/route/${id}`, {name,grade, type,areaid, latitude, longitude,description})\r\n      dispatch({type: \"edit_route\", payload: {id,name,grade,type,areaid,latitude,longitude,description}})\r\n      if(navigateAway){\r\n        navigateAway();\r\n      }\r\n      if(alertMessage){\r\n        alertMessage();\r\n      }\r\n\r\n    }catch(err){\r\n        failMessage();\r\n    }\r\n  }\r\n}\r\n\r\n\r\nconst unfollowRoute = async(id) =>{\r\n    \r\n  const userid = await AsyncStorage.getItem('userid')\r\n\r\n  const res = await apiServer.delete(`/follow/user/${userid}/route/${id}`)\r\n\r\n\r\n}\r\n\r\n//Follow Area\r\n\r\nconst followRoute = (dispatch)=>{\r\n  return async(id,navigateAway,alertMessage,failMessage) =>{\r\n    const userid = await AsyncStorage.getItem('userid')\r\n    try{\r\n\r\n      const res = await apiServer.post(`/follow/user/${userid}/route/${id}`)\r\n      if(navigateAway){\r\n        navigateAway();\r\n      }\r\n      if(alertMessage){\r\n        alertMessage();\r\n      }\r\n    }catch(err){\r\n      unfollowRoute(id);\r\n      failMessage();\r\n    }\r\n  }\r\n}\r\n\r\nconst setSearchedRoutes =  (dispatch) =>{\r\n  return (data) =>{\r\n\r\n    dispatch({type: \"set_searched_routes\", payload: data })\r\n  }\r\n}\r\n \r\n\r\n\r\nexport const {Context,Provider} = createDataContext(routeReducer, {addRoute,deleteRoute,editRoute,getRoute,getRoutes,getUserRoutes,followRoute, getFollowedRoutes, setSearchedRoutes}, [])"]},"metadata":{},"sourceType":"module"}